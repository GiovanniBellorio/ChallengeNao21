<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="Distance Check" id="1" localization="8" tooltip="" x="471" y="446">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time
from math import *
from itertools import combinations
from naoqi import ALProxy




class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.markInfoArray = []
        self.diameter = 0.2
        self.distance = 1
    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass
    def check(self):
        distances = []
        markerdict = {}
        count=0
        for markers in self.markInfoArray:
            markerdict[count] = distance_calc(markers[4]),markers[1]
            count+=1

        comb=combinations(markerdict,2)


        for dati in list(comb):
            b = markerdict[dati[0]][1]
            c = markerdict[dati[1]][1]
            g = markerdict[dati[0]][0]
            p = markerdict[dati[1]][0]
            a = abs(b-c)
            distances.append(sqrt((p-g*cos(a))**2+g**2-(g*cos(a))**2))

        self.logger.info(distances)

        if all(dist >= self.distance for dist in distances):
            self.onUnload()
            self.corretta()

        else:
            self.onUnload()
            self.allontanarsi
    def distance_calc(self, angle):
        return self.diameter/(2*tan(angle/2))

    def onInput_onStart(self):
         #self.onStopped() #activate the output of the box
        markProxy = ALProxy("ALLandMarkDetection")
        # data = markProxy.getData("LandmarkDetected")
        period = 500
        markProxy.subscribe("Test_LandMark", period, 0.0 )
        try:
            memoryProxy = ALProxy("ALMemory")
        except Exception, e:
            self.logger.info("Error when creating memory proxy:")
            self.logger.info(str(e))
            exit(1)
            onInput_onStart()
        time.sleep(0.1)
        val = memoryProxy.getData("LandmarkDetected", 0)
        if (val):
            self.logger.info("ok data")
            self.logger.info(val)
            # We detected landmarks !
            # For each mark, we can read its shape info and ID.
            # First Field = TimeStamp.
            timeStamp = val[0]
            # Second Field = array of Mark_Info's.
            self.markInfoArray = val[1]

            try:
                check()
            except Exception, e:
                self.logger.info ("Landmarks detected, but it seems getData is invalid. ALValue =")
                self.logger.info (val)
                self.logger.info ("Error msg %s" % (str(e)))
                onInput_onStart()
        else:
            print "Error with getData. ALValue = %s" % (str(val))
            onInput_onStart()



        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.corretta() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="corretta" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
              <Output name="allontanarsi" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
            </Box>
            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" />
            <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
