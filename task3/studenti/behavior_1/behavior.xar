<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram scale="141.421">
            <Box name="rec_android" id="8" localization="8" tooltip="receive Data from Android" x="206" y="210">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import socket

import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def azione(self, response):
        self.logger.info(response)

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        self.stop = True

        messagercv = ""

        while self.stop:
            sckt = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            #sckt.connect(("192.168.43.75", 5050)) # home
            sckt.connect(("192.168.0.101", 5050)) # school
            messagesend = "nao"
            sckt.sendall(messagesend.encode("utf-8"))
            # wait
            data = sckt.recv(16)
            sckt.close()
            if data:
                messagercv = data
                self.out_yawAngle(data)
            else:
                messagercv = messagercv.decode("utf-8")

            #self.azione(messagercv)
            time.sleep(1)
        pass

    def onInput_onStop(self):
        self.stop = False;
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Output name="out_yawAngle" type="2" type_size="1" nature="2" inner="0" tooltip="yaw Angle from android" id="5" />
            </Box>
            <Box name="Studente" id="1" localization="8" tooltip="" x="447" y="210">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_data(self,data):
        #self.onStopped() #activate the output of the box
        Class={
        0 : "Cocco Benvenuto",
        1 : "Di Gioia Felice",
        2 : "Era Natale",
        3 : "Dal Seno Bruno",
        4 : "La Banca Benedetto",
        5 : "Bo Lino"
}

        self.dataOut(Class[data])


        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="2" />
              <Input name="data" type="2" type_size="1" nature="2" inner="0" tooltip="" id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Output name="dataOut" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
            </Box>
            <Box name="Get Parameter" id="2" localization="8" tooltip="Return the value of the parent box parameter. Set the name of the parameter you want to be returned in parameters of this box.&#x0A;&#x0A;V1.1.0&#x0A;" x="135" y="970">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onGet(self):
        try:
            self.onData(self.getParameter(self.getParameter("Parameter name"))) #~ activate output of the box
        except:
            self.logger.error("No parameter found")
            self.onData("Error")
        pass]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onGet" type="1" type_size="1" nature="1" inner="0" tooltip="To send the value on the output." id="2" />
              <Output name="onData" type="0" type_size="1" nature="2" inner="0" tooltip="The value of the parameter." id="3" />
              <Parameter name="Parameter name" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="Name of the parent box parameter you want the value to be returned." id="4" />
            </Box>
            <Box name="Student_counter" id="3" localization="8" tooltip="" x="321" y="736">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.numero_chiamate=[0,0,0,0,0,0]
    def onLoad(self):
        self.memory = self.session().service("ALMemory")
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):

        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onStopped() #activate the output of the box


    def onInput_student(self, student):
        result = self.memory.getData(self.getParameter("MyApplication/MyData"))

        result[student] += 1
        if False:
            self.answer
        pass]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Input name="student" type="2" type_size="1" nature="2" inner="0" tooltip="" id="4" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
              <Output name="answer" type="2" type_size="1" nature="2" inner="0" tooltip="" id="6" />
            </Box>
            <Link inputowner="8" indexofinput="3" outputowner="8" indexofoutput="5" />
            <Link inputowner="1" indexofinput="3" outputowner="8" indexofoutput="5" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
